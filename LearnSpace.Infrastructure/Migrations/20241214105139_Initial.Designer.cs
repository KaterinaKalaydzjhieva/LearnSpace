// <auto-generated />
using System;
using LearnSpace.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LearnSpace.Infrastructure.Migrations
{
    [DbContext(typeof(LearnSpaceDbContext))]
    [Migration("20241214105139_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.35")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LearnSpace.Infrastructure.Database.Entities.Account.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2d522f0f-1d26-429e-8bef-0098f10d96e9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8c0dace8-e127-4a60-bcf4-9d22a5e6915f",
                            DateOfBirth = new DateTime(1980, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@abv.bg",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Adminov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ABV.BG",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEFj59EQcqWrNC3FOdeBeKB74iWtVGX9EOHeiEE5n+1DH4gZds4yDAc5HaYn2wgd6nw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e5a32cb5-dea3-4bc2-9d57-35ba719e6ece",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("bdc70ff8-a02a-428f-ad1c-b5ba645a45e1"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5717e403-ee12-4a27-b122-86c14193452f",
                            DateOfBirth = new DateTime(1980, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "teacher1@abv.bg",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEACHER1@ABV.BG",
                            NormalizedUserName = "TEACHER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEFJmO50eGZ/lQuV5WzFK+Qc6xLDDgP3BgqJq9y4ve3IhanxODSnC12RxtmGl/Zs3ow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fc02ad32-03d0-4112-82ee-6b92541bb25d",
                            TwoFactorEnabled = false,
                            UserName = "teacher1"
                        },
                        new
                        {
                            Id = new Guid("bc5f8df5-6115-4344-897b-73e185df4bff"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bbcfcd43-5de0-4ff0-a82f-8d589f8573c3",
                            DateOfBirth = new DateTime(1982, 8, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "teacher2@abv.bg",
                            EmailConfirmed = false,
                            FirstName = "Grigor",
                            LastName = "Georgiev",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEACHER2@ABV.BG",
                            NormalizedUserName = "TEACHER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEEFsjBr+5wpBU/1okBki36OGrOKpUDLaqt5b/mrO5fqQyyMhYycydz/G/7ictyqtHw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "37917c47-1d9f-4acb-8dc9-f8c82a06e131",
                            TwoFactorEnabled = false,
                            UserName = "teacher2"
                        },
                        new
                        {
                            Id = new Guid("a52dc824-b577-4862-ac67-29d391116793"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f847713c-3c3b-4f28-82a4-7c8277c6fce5",
                            DateOfBirth = new DateTime(2005, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "student1@abv.bg",
                            EmailConfirmed = false,
                            FirstName = "Vladislav",
                            LastName = "Popov",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT1@ABV.BG",
                            NormalizedUserName = "STUDENT1",
                            PasswordHash = "AQAAAAEAACcQAAAAEMHouKVeuGmgBUh+bDp4HMCxkKvzR3GRMEyKm1ifSTp4P9FCk6XzqOKRqd7dT2Vl8A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dd5274d5-a01f-47c3-b66d-80b40eb1b3c2",
                            TwoFactorEnabled = false,
                            UserName = "student1"
                        },
                        new
                        {
                            Id = new Guid("08d20ff4-ecdd-4b8a-8142-4cf42ee6adc6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ee855b2d-f344-4e84-a838-6dc178b29fec",
                            DateOfBirth = new DateTime(2006, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "student2@abv.bg",
                            EmailConfirmed = false,
                            FirstName = "Diana",
                            LastName = "Atanasova",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT2@ABV.BG",
                            NormalizedUserName = "STUDENT2",
                            PasswordHash = "AQAAAAEAACcQAAAAEBRj5EhT9hqQbZ84+VIuMo88CM3XqehZmAVyFvN5vHk2z/+NGnBr1+D62vzg6Roj9g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "28f418fd-02f6-4c9e-aae4-3b3617890dec",
                            TwoFactorEnabled = false,
                            UserName = "student2"
                        },
                        new
                        {
                            Id = new Guid("3cc698b0-736e-490a-97e3-3f343bf8bfd8"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7809cf20-6bb5-4cf3-8a89-70622f5e2d9e",
                            DateOfBirth = new DateTime(2005, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "student3@abv.bg",
                            EmailConfirmed = false,
                            FirstName = "Ema",
                            LastName = "Ivanova",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT3@ABV.BG",
                            NormalizedUserName = "STUDENT3",
                            PasswordHash = "AQAAAAEAACcQAAAAEHUp0dfRQrAq4ZSDEET6fk+666wlWRpniTfoRaRI0rMDM3Nz6I719cjc9vc+dadmuA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2f4a73a3-6e47-4633-8100-8cab46ffe057",
                            TwoFactorEnabled = false,
                            UserName = "student3"
                        },
                        new
                        {
                            Id = new Guid("ebdc00b8-7106-4cbd-a482-da93c40103d3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "de0bcbc5-9c06-4ed8-8b82-28fb84f165b4",
                            DateOfBirth = new DateTime(2006, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "student4@abv.bg",
                            EmailConfirmed = false,
                            FirstName = "Alex",
                            LastName = "Georgiev",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT4@ABV.BG",
                            NormalizedUserName = "STUDENT4",
                            PasswordHash = "AQAAAAEAACcQAAAAEILAAqKL6b5DZL/TNNbRf7zCybjkUirDGCBxbtE2iGr5zb57tHu5E+/KpPV6BV8FYQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0174ca38-3ebe-4a1e-aad3-9d9743a90832",
                            TwoFactorEnabled = false,
                            UserName = "student4"
                        },
                        new
                        {
                            Id = new Guid("267a7709-17b4-413c-9026-a6f365d59731"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4cd79fdc-367c-4fd9-97ad-10a4f887f9ef",
                            DateOfBirth = new DateTime(2006, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "student5@abv.bg",
                            EmailConfirmed = false,
                            FirstName = "Lili",
                            LastName = "Samardjieva",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT5@ABV.BG",
                            NormalizedUserName = "STUDENT5",
                            PasswordHash = "AQAAAAEAACcQAAAAECM1Uds9HZhUFVKm+7pfo7xHxQ2iK+2L6simWPvq0gdQ31kNl3QxaUNu/DtM3Br13w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "750b613c-75ba-42f0-930a-6117a4c4923f",
                            TwoFactorEnabled = false,
                            UserName = "student5"
                        });
                });

            modelBuilder.Entity("LearnSpace.Infrastructure.Database.Entities.Account.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5c07f155-602e-403b-bb86-5a786814f575"),
                            ApplicationUserId = new Guid("a52dc824-b577-4862-ac67-29d391116793")
                        },
                        new
                        {
                            Id = new Guid("18e76084-b8a6-4e78-bd26-143f33a05eb8"),
                            ApplicationUserId = new Guid("08d20ff4-ecdd-4b8a-8142-4cf42ee6adc6")
                        },
                        new
                        {
                            Id = new Guid("c6903087-71e5-41ba-80be-ed119b7902fc"),
                            ApplicationUserId = new Guid("3cc698b0-736e-490a-97e3-3f343bf8bfd8")
                        },
                        new
                        {
                            Id = new Guid("f4aa693d-305e-426b-950c-d02a8ca8b56f"),
                            ApplicationUserId = new Guid("ebdc00b8-7106-4cbd-a482-da93c40103d3")
                        },
                        new
                        {
                            Id = new Guid("bb5432a1-ea56-450b-9db6-f7349faf28a6"),
                            ApplicationUserId = new Guid("267a7709-17b4-413c-9026-a6f365d59731")
                        });
                });

            modelBuilder.Entity("LearnSpace.Infrastructure.Database.Entities.Account.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubjectSpecialization")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5e846435-c18b-4df9-b4a2-b6d9d0414694"),
                            ApplicationUserId = new Guid("bdc70ff8-a02a-428f-ad1c-b5ba645a45e1"),
                            SubjectSpecialization = "Math"
                        },
                        new
                        {
                            Id = new Guid("047e49c7-8466-4419-88e3-1b6f7107d247"),
                            ApplicationUserId = new Guid("bc5f8df5-6115-4344-897b-73e185df4bff"),
                            SubjectSpecialization = "History"
                        });
                });

            modelBuilder.Entity("LearnSpace.Infrastructure.Database.Entities.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Assignments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            Description = "Test your understanding of the core concepts of geometry, including identifying shapes, calculating angles, and writing geometric proofs. This assessment covers both basic and advanced topics to challenge your spatial reasoning and problem-solving skills.",
                            DueDate = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Geometric Foundations: Shapes, Angles, and Proofs"
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 1,
                            Description = "This test focuses on applying geometric theorems to calculate areas, volumes, and properties of 2D and 3D shapes. Ideal for students ready to showcase their analytical abilities and mastery of geometric principles.",
                            DueDate = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Geometry Challenge: Area, Volume, and Theorems"
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 2,
                            Description = "Test your mastery of foundational algebra concepts, including solving equations, working with inequalities, and graphing linear and quadratic functions. Perfect for sharpening your analytical and computational skills.",
                            DueDate = new DateTime(2024, 12, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Algebra Essentials: Equations, Inequalities, and Graphs"
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 2,
                            Description = "Put your algebra knowledge to the test with questions covering systems of equations, polynomial operations, and real-world applications. Designed to evaluate both theoretical understanding and practical problem-solving ability.",
                            DueDate = new DateTime(2024, 12, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Algebra in Action: Systems, Polynomials, and Word Problems"
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 3,
                            Description = "Assess your understanding of key events in modern history, from political revolutions to world wars and the social transformations that shaped the 19th and 20th centuries. Test your knowledge of causes, consequences, and global impacts.",
                            DueDate = new DateTime(2024, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Modern History Milestones: Revolutions, Wars, and Transformations"
                        },
                        new
                        {
                            Id = 6,
                            CourseId = 3,
                            Description = "Examine pivotal events and trends of the 20th century, from world wars to the civil rights movement and globalization. This test evaluates your understanding of historical causes, key figures, and lasting legacies.",
                            DueDate = new DateTime(2024, 12, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Twentieth Century: Conflict, Progress, and Globalization"
                        },
                        new
                        {
                            Id = 7,
                            CourseId = 4,
                            Description = "Explore the rise and fall of ancient civilizations, from Mesopotamia to Rome. This test covers key developments in governance, culture, and innovation that shaped early human history.",
                            DueDate = new DateTime(2024, 12, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Ancient Civilizations: Foundations of the Modern World"
                        },
                        new
                        {
                            Id = 8,
                            CourseId = 4,
                            Description = "Dive into the fascinating world of ancient empires, legendary battles, and enduring myths. This assessment evaluates your knowledge of ancient societies, their achievements, and their lasting influence on humanity.",
                            DueDate = new DateTime(2024, 12, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Empires and Myths: A Journey Through Ancient History"
                        },
                        new
                        {
                            Id = 9,
                            CourseId = 5,
                            Description = "Test your knowledge of the medieval period, from the structure of feudal society to the influence of the Church and the everyday lives of people in the Middle Ages. Explore the events and ideas that defined this era.",
                            DueDate = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Middle Ages: Feudalism, Faith, and Fiefdoms"
                        },
                        new
                        {
                            Id = 10,
                            CourseId = 5,
                            Description = "This test examines the major events and themes of the Middle Ages, including the Crusades, the growth of monarchies, and the cultural and intellectual achievements that emerged from this dynamic period.",
                            DueDate = new DateTime(2024, 12, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Medieval History: Crusades, Kingdoms, and Culture"
                        });
                });

            modelBuilder.Entity("LearnSpace.Infrastructure.Database.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("GroupCapacity")
                        .HasColumnType("int");

                    b.Property<int>("GroupCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "In this course you can learn the basic concepts of the 3D world with Math. Learn Geometry today!",
                            GroupCapacity = 20,
                            GroupCount = 0,
                            Name = "Geometry",
                            TeacherId = new Guid("5e846435-c18b-4df9-b4a2-b6d9d0414694")
                        },
                        new
                        {
                            Id = 2,
                            Description = "In this course you can learn the basic concepts of numbers around us. Learn Algebra today!",
                            GroupCapacity = 25,
                            GroupCount = 0,
                            Name = "Algebra",
                            TeacherId = new Guid("5e846435-c18b-4df9-b4a2-b6d9d0414694")
                        },
                        new
                        {
                            Id = 3,
                            Description = "In this course you can learn how the new empires are formed and passed to the next generations. Join us!",
                            GroupCapacity = 20,
                            GroupCount = 0,
                            Name = "Modern History",
                            TeacherId = new Guid("047e49c7-8466-4419-88e3-1b6f7107d247")
                        },
                        new
                        {
                            Id = 4,
                            Description = "In this course you can learn how the people in the ancient times have lived. Interested? Let's learn together!",
                            GroupCapacity = 30,
                            GroupCount = 0,
                            Name = "Ancient History",
                            TeacherId = new Guid("047e49c7-8466-4419-88e3-1b6f7107d247")
                        },
                        new
                        {
                            Id = 5,
                            Description = "In this course you can learn how hard were the middle ages and why they are important. Join today!",
                            GroupCapacity = 20,
                            GroupCount = 0,
                            Name = "Middle Ages",
                            TeacherId = new Guid("047e49c7-8466-4419-88e3-1b6f7107d247")
                        });
                });

            modelBuilder.Entity("LearnSpace.Infrastructure.Database.Entities.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateGraded")
                        .HasColumnType("datetime2");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubmissionId")
                        .IsUnique();

                    b.ToTable("Grades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateGraded = new DateTime(2024, 12, 14, 12, 51, 39, 122, DateTimeKind.Local).AddTicks(4900),
                            Score = 4.0,
                            StudentId = new Guid("5c07f155-602e-403b-bb86-5a786814f575"),
                            SubmissionId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateGraded = new DateTime(2024, 12, 14, 12, 51, 39, 122, DateTimeKind.Local).AddTicks(4935),
                            Score = 3.0,
                            StudentId = new Guid("18e76084-b8a6-4e78-bd26-143f33a05eb8"),
                            SubmissionId = 2
                        },
                        new
                        {
                            Id = 3,
                            DateGraded = new DateTime(2024, 12, 14, 12, 51, 39, 122, DateTimeKind.Local).AddTicks(4938),
                            Score = 5.0,
                            StudentId = new Guid("c6903087-71e5-41ba-80be-ed119b7902fc"),
                            SubmissionId = 3
                        },
                        new
                        {
                            Id = 4,
                            DateGraded = new DateTime(2024, 12, 14, 12, 51, 39, 122, DateTimeKind.Local).AddTicks(4941),
                            Score = 6.0,
                            StudentId = new Guid("f4aa693d-305e-426b-950c-d02a8ca8b56f"),
                            SubmissionId = 4
                        },
                        new
                        {
                            Id = 5,
                            DateGraded = new DateTime(2024, 12, 14, 12, 51, 39, 122, DateTimeKind.Local).AddTicks(4943),
                            Score = 6.0,
                            StudentId = new Guid("bb5432a1-ea56-450b-9db6-f7349faf28a6"),
                            SubmissionId = 5
                        });
                });

            modelBuilder.Entity("LearnSpace.Infrastructure.Database.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("LearnSpace.Infrastructure.Database.Entities.StudentCourse", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("StudentsCourses");

                    b.HasData(
                        new
                        {
                            StudentId = new Guid("5c07f155-602e-403b-bb86-5a786814f575"),
                            CourseId = 1
                        },
                        new
                        {
                            StudentId = new Guid("5c07f155-602e-403b-bb86-5a786814f575"),
                            CourseId = 2
                        },
                        new
                        {
                            StudentId = new Guid("18e76084-b8a6-4e78-bd26-143f33a05eb8"),
                            CourseId = 2
                        },
                        new
                        {
                            StudentId = new Guid("18e76084-b8a6-4e78-bd26-143f33a05eb8"),
                            CourseId = 3
                        },
                        new
                        {
                            StudentId = new Guid("c6903087-71e5-41ba-80be-ed119b7902fc"),
                            CourseId = 3
                        },
                        new
                        {
                            StudentId = new Guid("c6903087-71e5-41ba-80be-ed119b7902fc"),
                            CourseId = 4
                        },
                        new
                        {
                            StudentId = new Guid("f4aa693d-305e-426b-950c-d02a8ca8b56f"),
                            CourseId = 4
                        },
                        new
                        {
                            StudentId = new Guid("f4aa693d-305e-426b-950c-d02a8ca8b56f"),
                            CourseId = 5
                        },
                        new
                        {
                            StudentId = new Guid("bb5432a1-ea56-450b-9db6-f7349faf28a6"),
                            CourseId = 5
                        },
                        new
                        {
                            StudentId = new Guid("bb5432a1-ea56-450b-9db6-f7349faf28a6"),
                            CourseId = 1
                        });
                });

            modelBuilder.Entity("LearnSpace.Infrastructure.Database.Entities.Submission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("GradeId")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SubmittedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("StudentId");

                    b.ToTable("Submissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignmentId = 2,
                            FilePath = "D:\\Programing Files\\C#\\LearnSpace\\LearnSpace\\wwwroot\\uploads\\submissions\\task1.txt",
                            GradeId = 1,
                            StudentId = new Guid("5c07f155-602e-403b-bb86-5a786814f575"),
                            SubmittedOn = new DateTime(2024, 12, 14, 10, 51, 39, 122, DateTimeKind.Utc).AddTicks(4817)
                        },
                        new
                        {
                            Id = 2,
                            AssignmentId = 4,
                            FilePath = "D:\\Programing Files\\C#\\LearnSpace\\LearnSpace\\wwwroot\\uploads\\submissions\\task2.txt",
                            GradeId = 2,
                            StudentId = new Guid("18e76084-b8a6-4e78-bd26-143f33a05eb8"),
                            SubmittedOn = new DateTime(2024, 12, 14, 10, 51, 39, 122, DateTimeKind.Utc).AddTicks(4821)
                        },
                        new
                        {
                            Id = 3,
                            AssignmentId = 6,
                            FilePath = "D:\\Programing Files\\C#\\LearnSpace\\LearnSpace\\wwwroot\\uploads\\submissions\\task3.txt",
                            GradeId = 3,
                            StudentId = new Guid("c6903087-71e5-41ba-80be-ed119b7902fc"),
                            SubmittedOn = new DateTime(2024, 12, 14, 10, 51, 39, 122, DateTimeKind.Utc).AddTicks(4823)
                        },
                        new
                        {
                            Id = 4,
                            AssignmentId = 8,
                            FilePath = "D:\\Programing Files\\C#\\LearnSpace\\LearnSpace\\wwwroot\\uploads\\submissions\\task4.txt",
                            GradeId = 4,
                            StudentId = new Guid("f4aa693d-305e-426b-950c-d02a8ca8b56f"),
                            SubmittedOn = new DateTime(2024, 12, 14, 10, 51, 39, 122, DateTimeKind.Utc).AddTicks(4824)
                        },
                        new
                        {
                            Id = 5,
                            AssignmentId = 10,
                            FilePath = "D:\\Programing Files\\C#\\LearnSpace\\LearnSpace\\wwwroot\\uploads\\submissions\\task5.txt",
                            GradeId = 5,
                            StudentId = new Guid("bb5432a1-ea56-450b-9db6-f7349faf28a6"),
                            SubmittedOn = new DateTime(2024, 12, 14, 10, 51, 39, 122, DateTimeKind.Utc).AddTicks(4825)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LearnSpace.Infrastructure.Database.Entities.Account.Student", b =>
                {
                    b.HasOne("LearnSpace.Infrastructure.Database.Entities.Account.ApplicationUser", "ApplicationUser")
                        .WithOne("Student")
                        .HasForeignKey("LearnSpace.Infrastructure.Database.Entities.Account.Student", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("LearnSpace.Infrastructure.Database.Entities.Account.Teacher", b =>
                {
                    b.HasOne("LearnSpace.Infrastructure.Database.Entities.Account.ApplicationUser", "ApplicationUser")
                        .WithOne("Teacher")
                        .HasForeignKey("LearnSpace.Infrastructure.Database.Entities.Account.Teacher", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("LearnSpace.Infrastructure.Database.Entities.Assignment", b =>
                {
                    b.HasOne("LearnSpace.Infrastructure.Database.Entities.Course", "Course")
                        .WithMany("Assignments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LearnSpace.Infrastructure.Database.Entities.Account.Teacher", null)
                        .WithMany("Assignments")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("LearnSpace.Infrastructure.Database.Entities.Course", b =>
                {
                    b.HasOne("LearnSpace.Infrastructure.Database.Entities.Account.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("LearnSpace.Infrastructure.Database.Entities.Grade", b =>
                {
                    b.HasOne("LearnSpace.Infrastructure.Database.Entities.Assignment", null)
                        .WithMany("Grades")
                        .HasForeignKey("AssignmentId");

                    b.HasOne("LearnSpace.Infrastructure.Database.Entities.Account.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearnSpace.Infrastructure.Database.Entities.Submission", "Submission")
                        .WithOne("Grade")
                        .HasForeignKey("LearnSpace.Infrastructure.Database.Entities.Grade", "SubmissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("LearnSpace.Infrastructure.Database.Entities.Notification", b =>
                {
                    b.HasOne("LearnSpace.Infrastructure.Database.Entities.Account.ApplicationUser", null)
                        .WithMany("Notifications")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("LearnSpace.Infrastructure.Database.Entities.Account.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LearnSpace.Infrastructure.Database.Entities.Account.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("LearnSpace.Infrastructure.Database.Entities.StudentCourse", b =>
                {
                    b.HasOne("LearnSpace.Infrastructure.Database.Entities.Course", "Course")
                        .WithMany("CourseStudents")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LearnSpace.Infrastructure.Database.Entities.Account.Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("LearnSpace.Infrastructure.Database.Entities.Submission", b =>
                {
                    b.HasOne("LearnSpace.Infrastructure.Database.Entities.Assignment", "Assignment")
                        .WithMany("Submissions")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearnSpace.Infrastructure.Database.Entities.Account.Student", "Student")
                        .WithMany("Submissions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("LearnSpace.Infrastructure.Database.Entities.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("LearnSpace.Infrastructure.Database.Entities.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearnSpace.Infrastructure.Database.Entities.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("LearnSpace.Infrastructure.Database.Entities.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LearnSpace.Infrastructure.Database.Entities.Account.ApplicationUser", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("LearnSpace.Infrastructure.Database.Entities.Account.Student", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("StudentCourses");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("LearnSpace.Infrastructure.Database.Entities.Account.Teacher", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("LearnSpace.Infrastructure.Database.Entities.Assignment", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("LearnSpace.Infrastructure.Database.Entities.Course", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("CourseStudents");
                });

            modelBuilder.Entity("LearnSpace.Infrastructure.Database.Entities.Submission", b =>
                {
                    b.Navigation("Grade");
                });
#pragma warning restore 612, 618
        }
    }
}
